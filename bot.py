import asyncio
import logging
import traceback
import os
import time
import re
import uuid
import json
import tempfile
from functools import wraps
from typing import List, Dict, Optional, Any, Callable, Awaitable
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from logger_config import setup_logger
from services import WebAnalyzer
from ai_utils import AIManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger(__name__)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏–∑ config.py
from config import BOT_TOKEN, DATABASE_URL, MESSAGES

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∏ –ò–ò –º–µ–Ω–µ–¥–∂–µ—Ä–∞
web_analyzer = WebAnalyzer()
ai_manager = AIManager()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
async def retry_async(func: Callable[..., Awaitable], *args, max_retries: int = 3, 
                     retry_delay: float = 2.0, timeout: float = 60.0, **kwargs):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏
    """
    last_exception = None
    current_delay = retry_delay
    
    for attempt in range(max_retries):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            result = await asyncio.wait_for(func(*args, **kwargs), timeout=timeout)
            return result  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
        except asyncio.TimeoutError as e:
            logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {func.__name__} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries})")
            last_exception = e
            
        except Exception as e:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É
            if "connection" in str(e).lower() or "timeout" in str(e).lower() or "network" in str(e).lower():
                logger.warning(f"–í–æ–∑–º–æ–∂–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {func.__name__}: {e} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries})")
                last_exception = e
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                raise
        
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        if attempt < max_retries - 1:
            await asyncio.sleep(current_delay)
            current_delay *= 1.5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {func.__name__} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫"
    logger.error(error_msg)
    if last_exception:
        raise type(last_exception)(f"{error_msg}: {str(last_exception)}")
        else:
        raise Exception(error_msg)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è retry_async –∫ –º–µ—Ç–æ–¥–∞–º –±–æ—Ç–∞
def retry_on_network_errors(max_retries=3, retry_delay=2.0, timeout=60.0):
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            last_exception = None
            current_delay = retry_delay

            for attempt in range(max_retries):
                try:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                    async with asyncio.timeout(timeout):
                        return await func(*args, **kwargs)
                except asyncio.TimeoutError:
                    logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {func.__name__} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries})")
                    last_exception = asyncio.TimeoutError("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç")
                except Exception as e:
                    # –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
                    if "connection" in str(e).lower() or "timeout" in str(e).lower() or "network" in str(e).lower():
                        logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {func.__name__}: {e} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries})")
                        last_exception = e
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
                        raise

                # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π
                if attempt < max_retries - 1:
                    await asyncio.sleep(current_delay)
                    current_delay *= 1.5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏

            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
            if last_exception:
                raise last_exception
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {func.__name__} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")

        return wrapper
    return decorator

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@retry_on_network_errors()
async def send_long_message(chat_id: int, text: str, parse_mode=ParseMode.MARKDOWN, reply_markup=None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    """
    if not text:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è chat_id={chat_id}")
        return

    # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 500 —Å–∏–º–≤–æ–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª
    if len(text) > 500:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as temp_file:
            temp_file.write(text)
            temp_file.flush()
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
                preview = text[:500] + "...\n\n–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ üëá"
                await bot.send_message(
                    chat_id=chat_id,
                    text=preview,
                    parse_mode=parse_mode,
                    reply_markup=reply_markup
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ñ–∞–π–ª
                with open(temp_file.name, 'rb') as file:
                    await bot.send_document(
                        chat_id=chat_id,
                        document=file,
                        caption="–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç"
                    )
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file.name)
            return
    
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=text,
                parse_mode=parse_mode,
            reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            await bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=None,
                reply_markup=reply_markup
                    )
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e2}")
            raise

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

class UserState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    waiting_point_a = State()
    waiting_point_b = State()
    waiting_timeframe = State()
    waiting_target_audience = State()
    waiting_channel_choice = State()  # –í—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ (–¥–∞/–Ω–µ—Ç)
    waiting_channel_selection = State()  # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    waiting_channel_period = State()  # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞
    waiting_channel_keyword = State()  # –í—ã–±–æ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
    waiting_article_choice = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
    waiting_article_url = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å—é
    waiting_strategy_confirmation = State()
    waiting_strategy_refinement = State()
    waiting_slogan_theme = State()
    waiting_channel_url = State()
    waiting_folder_name = State()
    waiting_folder_selection = State()
    waiting_model_selection = State()
    waiting_providers_selection = State()
    waiting_analysis = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–æ–≤
    waiting_search_confirmation = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    waiting_news_url = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è URL –Ω–æ–≤–æ—Å—Ç–µ–π
    waiting_search_query = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    waiting_channel_username = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞


async def generate_strategy_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_strategy"),
        InlineKeyboardButton("üîÑ –£–ª—É—á—à–∏—Ç—å", callback_data="refine_strategy"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_strategy")
    )
    return keyboard


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(MESSAGES['start'], parse_mode=ParseMode.HTML)
    await message.answer(MESSAGES['help'], parse_mode=ParseMode.HTML)


@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = MESSAGES['help'] + "\n\n" + """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/folders - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∞–º–∏
/create_folder - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É
/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/channels - –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
/analyze - –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞
/models - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏ –ò–ò
/providers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""

    await message.answer(help_text, parse_mode=ParseMode.HTML)


@dp.message_handler(commands=['new_strategy'])
async def cmd_new_strategy(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    current_state = await state.get_state()
    if current_state is not None:
        logger.info(f"–°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state} –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        await state.finish()
        
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = InlineKeyboardMarkup()
    cancel_keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation"))
    
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é (—Ç–æ—á–∫–∞ –ê):",
        reply_markup=cancel_keyboard
    )
    await UserState.waiting_point_a.set()


@dp.message_handler(state=UserState.waiting_point_a)
async def process_point_a(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–∫–∏ –ê"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–∫–∏ –ê: {message.text[:20]}...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É A –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(point_a=message.text)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = InlineKeyboardMarkup()
    cancel_keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å (—Ç–æ—á–∫–∞ –ë):", reply_markup=cancel_keyboard)
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_point_b")
    await UserState.waiting_point_b.set()


@dp.message_handler(state=UserState.waiting_point_b)
async def process_point_b(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–∫–∏ –ë"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–∫–∏ –ë: {message.text[:20]}...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É B –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(point_b=message.text)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = InlineKeyboardMarkup()
    cancel_keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '3 –º–µ—Å—è—Ü–∞'):", reply_markup=cancel_keyboard)
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_timeframe")
    await UserState.waiting_timeframe.set()


@dp.message_handler(state=UserState.waiting_timeframe)
async def process_timeframe(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫"""
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä–µ–º—è: {message.text}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(timeframe=message.text)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = InlineKeyboardMarkup()
    cancel_keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:", reply_markup=cancel_keyboard)
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_target_audience")
    await UserState.waiting_target_audience.set()


@dp.message_handler(state=UserState.waiting_target_audience)
async def process_target_audience(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"""
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {message.text}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(target_audience=message.text)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å Telegram-–∫–∞–Ω–∞–ª", callback_data="add_channel_to_strategy"),
        InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–Ω–∞–ª–∞", callback_data="continue_without_channel"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_strategy")
    )
    
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å Telegram-–∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏?",
        reply_markup=keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
    await UserState.waiting_channel_choice.set()
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_channel_choice")


@dp.callback_query_handler(lambda c: c.data == "add_channel_to_strategy", state=UserState.waiting_channel_choice)
async def add_channel_to_strategy(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    channels = await web_analyzer.get_channels()
    
    if not channels:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–Ω–∞–ª–∞
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(—Ç–∞–∫ –∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥—É–º–∞—é –Ω–µ —Ç–æ–∫ –≤ –∏–Ω–µ—Ç–µ –¥–µ–ª–æ –±–ª—è
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª", callback_data="add_new_channel"),
            InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–Ω–∞–ª–∞", callback_data="continue_without_channel"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_strategy")
        )

        await bot.send_message(
            callback_query.from_user.id,
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–Ω–∞–ª–∞?",
            reply_markup=keyboard
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    for channel in channels:
        channel_title = channel.get('title', channel.get('username', '–ö–∞–Ω–∞–ª –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        keyboard.add(
            InlineKeyboardButton(
                f"{channel_title}",
                callback_data=f"select_channel:{channel['id']}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª", callback_data="add_new_channel"),
        InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–Ω–∞–ª–∞", callback_data="continue_without_channel"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_strategy")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
    await UserState.waiting_channel_selection.set()


@dp.callback_query_handler(lambda c: c.data.startswith("select_channel:"), state=UserState.waiting_channel_selection)
async def select_channel(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    channel_id = int(callback_query.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channels = await web_analyzer.get_channels()
    selected_channel = None
    for channel in channels:
        if channel['id'] == channel_id:
            selected_channel = channel
            break
    
    if not selected_channel:
        await bot.send_message(
            callback_query.from_user.id,
            "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_channel=selected_channel)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–µ—Ä–∏–æ–¥–µ –∞–Ω–∞–ª–∏–∑–∞
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data="period:1"),
        InlineKeyboardButton("4 –¥–Ω—è", callback_data="period:4"),
        InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data="period:7"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_channel")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: *{selected_channel.get('title', selected_channel.get('username', '–ö–∞–Ω–∞–ª'))}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–æ–≤:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    await UserState.waiting_channel_period.set()


@dp.callback_query_handler(lambda c: c.data.startswith("period:"), state=UserState.waiting_channel_period)
async def process_channel_period(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞"""
    await bot.answer_callback_query(callback_query.id)
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    period_days = int(callback_query.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(channel_period=period_days)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –∫–ª—é—á–µ–≤–æ–º —Å–ª–æ–≤–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚û°Ô∏è –ë–µ–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞", callback_data="no_keyword"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_channel")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: *{period_days} –¥–Ω–µ–π*\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await UserState.waiting_channel_keyword.set()


@dp.message_handler(state=UserState.waiting_channel_keyword)
async def process_channel_keyword(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
    keyword = message.text.strip()
    
    if not keyword or len(keyword) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ë–µ–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞'.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(channel_keyword=keyword)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    processing_msg = await message.answer(MESSAGES['processing'])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
        data = await state.get_data()
        selected_channel = data.get('selected_channel')
        period_days = data.get('channel_period', 7)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
        channel_analysis = await web_analyzer.analyze_channel(
            selected_channel.get('username', ''),
            days=period_days
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        filtered_messages = []
        for msg in channel_analysis.get('messages', []):
            if keyword.lower() in msg.get('text', '').lower():
                filtered_messages.append(msg)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        channel_content = "\n\n".join([msg.get('text', '') for msg in filtered_messages])
        
        if not channel_content:
            await processing_msg.delete()
            await message.answer(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}' –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π.\n"
                f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ?"
            )

            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ", callback_data=f"period:{period_days}"),
                InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–Ω–∞–ª–∞", callback_data="continue_without_channel"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_strategy")
            )
            
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await state.update_data(
            channel_title=selected_channel.get('title', selected_channel.get('username', '')),
            channel_content=channel_content,
            channel_url=f"https://t.me/{selected_channel.get('username', '')}",
            channel_analysis=channel_analysis
        )
        
        await processing_msg.delete()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —Å—Ç–∞—Ç—å–µ
        await message.answer(
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}'.\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞—é –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–ª—è –µ—â—ë –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏
        await ask_about_article(message.chat.id, state)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞: {e}")
        await processing_msg.delete()
        
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞: {str(e)}\n"
            f"–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª."
        )
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª", callback_data="add_channel_to_strategy"),
            InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–Ω–∞–ª–∞", callback_data="continue_without_channel"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_strategy")
        )
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "no_keyword", state=UserState.waiting_channel_keyword)
async def process_no_keyword(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await state.update_data(channel_keyword="")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    processing_msg = await bot.send_message(
        callback_query.from_user.id,
        MESSAGES['processing']
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
        data = await state.get_data()
        selected_channel = data.get('selected_channel')
        period_days = data.get('channel_period', 7)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
        channel_analysis = await web_analyzer.analyze_channel(
            selected_channel.get('username', ''),
            days=period_days
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = channel_analysis.get('messages', [])
        channel_content = "\n\n".join([msg.get('text', '') for msg in messages if msg.get('text')])
        
        if not channel_content:
            await processing_msg.delete()
            await bot.send_message(
                callback_query.from_user.id,
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π.\n"
                f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª?"
            )
            
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª", callback_data="add_channel_to_strategy"),
                InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–Ω–∞–ª–∞", callback_data="continue_without_channel"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_strategy")
            )
            
            await bot.send_message(
                callback_query.from_user.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await state.update_data(
            channel_title=selected_channel.get('title', selected_channel.get('username', '')),
            channel_content=channel_content,
            channel_url=f"https://t.me/{selected_channel.get('username', '')}",
            channel_analysis=channel_analysis
        )
        
        await processing_msg.delete()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —Å—Ç–∞—Ç—å–µ
        await bot.send_message(
            callback_query.from_user.id,
            f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π.\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞—é –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–ª—è –µ—â—ë –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏
        await ask_about_article(callback_query.from_user.id, state)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞: {e}")
        await processing_msg.delete()
        
        await bot.send_message(
            callback_query.from_user.id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞: {str(e)}\n"
            f"–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª."
        )
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª", callback_data="add_channel_to_strategy"),
            InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–Ω–∞–ª–∞", callback_data="continue_without_channel"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_strategy")
        )
        
        await bot.send_message(
            callback_query.from_user.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )


@dp.callback_query_handler(lambda c: c.data == "add_new_channel", state=[UserState.waiting_channel_choice, UserState.waiting_channel_selection])
async def add_new_channel_to_strategy(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
    folders = await web_analyzer.get_folders()
    
    if not folders:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞–ø–æ–∫, –ø—Ä–æ—Å–∏–º —Å–æ–∑–¥–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫—É
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", callback_data="create_folder"),
            InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞–Ω–∞–ª–∞", callback_data="continue_without_channel"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_strategy")
        )
        
        await bot.send_message(
            callback_query.from_user.id,
            "–£ –≤–∞—Å –Ω–µ—Ç –ø–∞–ø–æ–∫ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É.",
            reply_markup=keyboard
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    for folder in folders:
        keyboard.add(
            InlineKeyboardButton(
                f"üìÅ {folder['name']}",
                callback_data=f"add_to_folder_strategy:{folder['id']}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_channel")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞:",
        reply_markup=keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
    await UserState.waiting_folder_selection.set()


@dp.callback_query_handler(lambda c: c.data.startswith("add_to_folder_strategy:"), state=UserState.waiting_folder_selection)
async def add_to_folder_strategy(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
    folder_id = int(callback_query.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–∞–ø–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(folder_id=folder_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = InlineKeyboardMarkup()
    cancel_keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_channel")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @username):",
        reply_markup=cancel_keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞
    await UserState.waiting_channel_username.set()


@dp.callback_query_handler(lambda c: c.data == "continue_without_channel", state=[UserState.waiting_channel_choice, UserState.waiting_channel_selection, UserState.waiting_channel_period, UserState.waiting_channel_keyword])
async def continue_without_channel(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏
    await ask_about_article(callback_query.from_user.id, state)


@dp.callback_query_handler(lambda c: c.data == "cancel_channel", state=[UserState.waiting_channel_choice, UserState.waiting_channel_selection, UserState.waiting_channel_period, UserState.waiting_channel_keyword, UserState.waiting_channel_url, UserState.waiting_folder_selection, UserState.waiting_channel_username])
async def cancel_channel(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await bot.answer_callback_query(callback_query.id)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏
    await ask_about_article(callback_query.from_user.id, state)


async def ask_about_article(chat_id: int, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤–æ–ø—Ä–æ—Å—É –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", callback_data="add_article"),
        InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å—Ç–∞—Ç—å–∏", callback_data="continue_without_article"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_strategy")
    )

    await bot.send_message(
        chat_id,
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏?",
        reply_markup=keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞
    await UserState.waiting_article_choice.set()
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_article_choice")


@dp.callback_query_handler(lambda c: c.data == "add_article", state=UserState.waiting_article_choice)
async def add_article(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = InlineKeyboardMarkup()
    cancel_keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_article")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:",
        reply_markup=cancel_keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è URL —Å—Ç–∞—Ç—å–∏
    await UserState.waiting_article_url.set()
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_article_url")


@dp.callback_query_handler(lambda c: c.data == "continue_without_article", state=UserState.waiting_article_choice)
async def continue_without_article(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    await generate_strategy(callback_query.from_user.id, state)


@dp.callback_query_handler(lambda c: c.data == "cancel_article", state=UserState.waiting_article_url)
async def cancel_article(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–µ–∑ —Å—Ç–∞—Ç—å–∏
    await generate_strategy(callback_query.from_user.id, state)


@dp.message_handler(state=UserState.waiting_article_url)
async def process_article_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL —Å—Ç–∞—Ç—å–∏"""
    url = message.text.strip()
    
    if not url.startswith(('http://', 'https://')):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http:// –∏–ª–∏ https://"
        )
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(MESSAGES['processing'])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
        article = await web_analyzer.fetch_article(url)
        
        if "error" in article:
            await processing_msg.delete()
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {article['error']}"
            )
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å—Ç–∞—Ç—å–∏
            continue_keyboard = InlineKeyboardMarkup()
            continue_keyboard.add(
                InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å—Ç–∞—Ç—å–∏", callback_data="continue_without_article")
            )
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–µ–∑ —Å—Ç–∞—Ç—å–∏?",
                reply_markup=continue_keyboard
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            article_title=article.get('title', ''),
            article_content=article.get('content', ''),
            article_url=url
        )
        
        await processing_msg.delete()
        await message.answer(
            f"‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞: *{article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n\n"
            f"–¢–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —É—á–µ—Ç–æ–º –≤—Å–µ–π —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        await generate_strategy(message.chat.id, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        await processing_msg.delete()
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏: {str(e)}\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–µ–∑ —Å—Ç–∞—Ç—å–∏."
        )
        # –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–µ–∑ —Å—Ç–∞—Ç—å–∏
        await generate_strategy(message.chat.id, state)


@retry_on_network_errors()
async def generate_strategy(chat_id: int, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    processing_msg = await bot.send_message(chat_id, MESSAGES['processing'])
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
    generation_task = asyncio.create_task(_generate_strategy_task(chat_id, state, data))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    update_task = asyncio.create_task(_update_processing_message(processing_msg))
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        strategy_result = await generation_task
        # –û—Ç–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        update_task.cancel()
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    if "error" in strategy_result:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menu_keyboard = InlineKeyboardMarkup()
        menu_keyboard.add(
            InlineKeyboardButton("üè† –ö –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="goto_main_menu"),
            InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data="new_strategy")
        )
        
            await processing_msg.edit_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_result['error']}",
            reply_markup=menu_keyboard
        )
        await state.finish()
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await state.update_data(strategy=strategy_result)
        
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    timeline_text = ""
    for period in strategy_result['timeline']:
        timeline_text += f"- {period['period']}\n"
        for action in period['actions']:
            timeline_text += f"  ‚Ä¢ {action}\n"
            
    resources_text = ""
    for resource in strategy_result['resources']:
        resources_text += f"- {resource}\n"

        strategy_text = f"üìä *–ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏:*\n{strategy_result.get('analysis', '')}\n\nüéØ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è:*\n{strategy_result['strategy']}\n\n‚è± *–í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è:*\n{timeline_text}\nüìã *–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã:*\n{resources_text}"
    
    # –ï—Å–ª–∏ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if data.get('channel_title'):
            strategy_text += f"\n\nüì± *–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è Telegram-–∫–∞–Ω–∞–ª:*\n[{data['channel_title']}]({data.get('channel_url', '')})"
        
        if data.get('article_title'):
            strategy_text += f"\n\nüì∞ *–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —Å—Ç–∞—Ç—å—è:*\n[{data['article_title']}]({data.get('article_url', '')})"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_strategy"),
        InlineKeyboardButton("üîÑ –£–ª—É—á—à–∏—Ç—å", callback_data="refine_strategy"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_strategy")
    )

    try:
        await send_long_message(chat_id, strategy_text, reply_markup=keyboard)
        await UserState.waiting_strategy_confirmation.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menu_keyboard = InlineKeyboardMarkup()
        menu_keyboard.add(
            InlineKeyboardButton("üè† –ö –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="goto_main_menu"),
            InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data="new_strategy")
        )
        
        try:
            await processing_msg.delete()
        except:
            pass
            
        await bot.send_message(
            chat_id,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=menu_keyboard
        )
        await state.finish()

    except asyncio.CancelledError:
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
        update_task.cancel()
        await processing_msg.edit_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.finish()
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        update_task.cancel()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        await processing_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {str(e)}")
        await state.finish()

async def _generate_strategy_task(chat_id: int, state: FSMContext, data: dict) -> Dict[str, Any]:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    try:
        # –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏
        situation_analysis = await ai_manager.analyze_situation(data['point_a'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –∏ —Å—Ç–∞—Ç—å–∏
        channel_content = data.get('channel_content', '')
        channel_title = data.get('channel_title', '')
        article_content = data.get('article_content', '')
        article_title = data.get('article_title', '')
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
        if channel_content and article_content:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –∫–∞–Ω–∞–ª –∏ —Å—Ç–∞—Ç—å—è, –ø–µ—Ä–µ–¥–∞–µ–º –æ–±–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            strategy_result = await ai_manager.generate_strategy_with_channel(
                data['point_a'],
                data['point_b'],
                data['timeframe'],
                data['target_audience'],
                channel_title,
                channel_content,
                article_title,
                article_content
            )
        elif channel_content:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª
            strategy_result = await ai_manager.generate_strategy_with_channel(
                data['point_a'],
                data['point_b'],
                data['timeframe'],
                data['target_audience'],
                channel_title,
                channel_content
            )
        elif article_content:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—å—è
            strategy_result = await ai_manager.generate_strategy_with_article(
                data['point_a'],
                data['point_b'],
                data['timeframe'],
                data['target_audience'],
                article_title,
                article_content
            )
        else:
            # –ï—Å–ª–∏ –Ω–∏ –∫–∞–Ω–∞–ª–∞, –Ω–∏ —Å—Ç–∞—Ç—å–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            strategy_result = await ai_manager.generate_strategy(
                data['point_a'],
                data['point_b'],
                data['timeframe'],
                data['target_audience']
            )
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        strategy_result['analysis'] = situation_analysis.get('analysis', '')
        return strategy_result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return {"error": str(e)}

async def _update_processing_message(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    dots = 0
    try:
        while True:
            dots = (dots + 1) % 4
            await message.edit_text(f"{MESSAGES['processing']}{'.' * dots}")
            await asyncio.sleep(1)
    except asyncio.CancelledError:
        # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.callback_query_handler(lambda c: c.data == 'search_internet', state='*')
async def search_internet_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    strategy = data.get('strategy', {}).get('strategy', '')
    point_a = data.get('point_a', '')
    point_b = data.get('point_b', '')
    target_audience = data.get('target_audience', '')
    
    # –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    try:
        suggested_query = await ai_manager.generate_search_query(
            strategy=strategy,
            point_a=point_a,
            point_b=point_b,
            target_audience=target_audience
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        suggested_query = f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {point_b} –¥–ª—è {target_audience}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    await state.update_data(suggested_query=suggested_query)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π", callback_data="use_suggested_query"),
        InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å", callback_data="enter_custom_query"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")
    )

    await bot.send_message(
        callback_query.from_user.id,
        f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n\n*{suggested_query}*\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
            
    await UserState.waiting_search_confirmation.set()


@dp.callback_query_handler(lambda c: c.data == "finish_strategy", state="*")
async def finish_strategy(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
    await bot.answer_callback_query(callback_query.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üè† –ö –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="goto_main_menu"),
        InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data="new_strategy")
    )

    await bot.send_message(
        callback_query.from_user.id,
        "–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.",
        reply_markup=keyboard
    )

    await state.finish()
    
@dp.callback_query_handler(lambda c: c.data == "use_suggested_query", state=UserState.waiting_search_confirmation)
async def use_suggested_query(callback_query: types.CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    data = await state.get_data()
    query = data.get('suggested_query', '')

    if not query:
        await bot.send_message(
            callback_query.from_user.id,
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é."
        )
        await UserState.waiting_search_query.set()
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    processing_msg = await bot.send_message(
            callback_query.from_user.id,
        MESSAGES['processing']
    )

    try:
        # –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        search_results = await web_analyzer.search_news(query, max_results=5)
        
        await processing_msg.delete()
        
        if not search_results:
            await bot.send_message(
                callback_query.from_user.id,
                "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*\n\n"
        
        for i, result in enumerate(search_results[:5], 1):
            results_text += f"{i}. [{result['title']}]({result['link']})\n"
            results_text += f"   {result['snippet'][:100]}...\n\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(search_results=search_results)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_internet"),
            InlineKeyboardButton("‚úÖ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="back_to_strategy")
        )
        
        await send_long_message(
            callback_query.from_user.id,
            results_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await processing_msg.delete()
        await bot.send_message(
            callback_query.from_user.id,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"
        )


@dp.callback_query_handler(lambda c: c.data == "enter_custom_query", state=UserState.waiting_search_confirmation)
async def enter_custom_query(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = InlineKeyboardMarkup()
    cancel_keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")
    )

    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
        reply_markup=cancel_keyboard
    )
    
    await UserState.waiting_search_query.set()


@dp.message_handler(state=UserState.waiting_search_query)
async def process_custom_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = message.text.strip()
    
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    processing_msg = await message.answer(MESSAGES['processing'])
    
    try:
        # –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        search_results = await web_analyzer.search_news(query, max_results=5)
        
        await processing_msg.delete()
        
        if not search_results:
            await message.answer(
                "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
            )
        return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*\n\n"
        
        for i, result in enumerate(search_results[:5], 1):
            results_text += f"{i}. [{result['title']}]({result['link']})\n"
            results_text += f"   {result['snippet'][:100]}...\n\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(search_results=search_results)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_internet"),
            InlineKeyboardButton("‚úÖ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="back_to_strategy")
        )
        
        await send_long_message(
            message.chat.id,
            results_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await processing_msg.delete()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")


@dp.callback_query_handler(lambda c: c.data == "cancel_search", state=[UserState.waiting_search_confirmation, UserState.waiting_search_query])
async def cancel_search(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
    await bot.answer_callback_query(callback_query.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ–ø—Ü–∏—è–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üì¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∑—É–Ω–≥–∏", callback_data="generate_slogans"),
        InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="finish_strategy")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –æ—Ç–º–µ–Ω–µ–Ω. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data == "back_to_strategy", state="*")
async def back_to_strategy(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    await bot.answer_callback_query(callback_query.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø—Ü–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", callback_data="search_internet"),
        InlineKeyboardButton("üì¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∑—É–Ω–≥–∏", callback_data="generate_slogans"),
        InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="finish_strategy")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=keyboard
    )

@dp.message_handler(commands=['folders'])
async def cmd_folders(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /folders"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        folders = await web_analyzer.get_folders()
        
        if not folders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞–ø–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–∞–ø–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_folder")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        for folder in folders:
            keyboard.add(
                InlineKeyboardButton(
                    f"üìÅ {folder['name']} ({folder['channel_count']} –∫–∞–Ω–∞–ª–æ–≤)",
                    callback_data=f"folder:{folder['id']}"
                )
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
        keyboard.add(
            InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É", callback_data="create_folder")
        )
        
        await message.answer("üìÇ –í–∞—à–∏ –ø–∞–ø–∫–∏:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['add_channel'])
async def cmd_add_channel(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_channel"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        folders = await web_analyzer.get_folders()
        
        if not folders:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞–ø–æ–∫, –ø—Ä–æ—Å–∏–º —Å–æ–∑–¥–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫—É
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", callback_data="create_folder")
            )
            
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø–∞–ø–æ–∫ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É.",
                reply_markup=keyboard
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        for folder in folders:
            keyboard.add(
                InlineKeyboardButton(
                    f"üìÅ {folder['name']}",
                    callback_data=f"add_to_folder:{folder['id']}"
                )
            )
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['channels'])
async def cmd_channels(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /channels"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels = await web_analyzer.get_channels()
        
        if not channels:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_channel"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        for channel in channels:
            keyboard.add(
                InlineKeyboardButton(
                    f"üì¢ {channel['title']} (@{channel['username']})",
                    callback_data=f"channel:{channel['id']}"
                )
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        keyboard.add(
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª", callback_data="add_channel")
        )
        
        await message.answer("üì¢ –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['analyze'])
async def cmd_analyze(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels = await web_analyzer.get_channels()
        
        if not channels:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_channel"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        for channel in channels:
            keyboard.add(
                InlineKeyboardButton(
                    f"üì¢ {channel['title']} (@{channel['username']})",
                    callback_data=f"analyze_channel:{channel['id']}"
                )
            )
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['models'])
async def cmd_models(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /models"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        models = await ai_manager.get_available_models()
        current_model = await ai_manager.get_current_model()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        for model in models:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –∫ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
            model_text = f"‚úÖ {model}" if model == current_model else model
            keyboard.add(
                InlineKeyboardButton(
                    model_text,
                    callback_data=f"set_model:{model}"
                )
            )
        
        await message.answer(
            f"ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{current_model}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['providers'])
async def cmd_providers(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /providers"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        providers = await ai_manager.get_available_providers()
        current_providers = await ai_manager.get_current_providers()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        for provider in providers:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –∫ —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
            provider_text = f"‚úÖ {provider}" if provider in current_providers else provider
            keyboard.add(
                InlineKeyboardButton(
                    provider_text,
                    callback_data=f"toggle_provider:{provider}"
                )
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        keyboard.add(
            InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_providers")
        )
        
        await message.answer(
            f"üîå –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: *{', '.join(current_providers)}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def on_startup(dp: Dispatcher):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot started")


async def on_shutdown(dp: Dispatcher):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot stopped")
    await dp.storage.close()
    await dp.storage.wait_closed()
    await bot.session.close()

@dp.callback_query_handler(lambda c: c.data == "create_folder", state="*")
async def create_folder_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏"""
    await bot.answer_callback_query(callback_query.id)
    
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
    await UserState.waiting_folder_name.set()

@dp.message_handler(state=UserState.waiting_folder_name)
async def process_folder_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏"""
    folder_name = message.text.strip()
    
    if not folder_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
    result = await web_analyzer.create_folder(folder_name)
    
    if result.get("status") == "success":
        await message.answer(f"‚úÖ –ü–∞–ø–∫–∞ '{folder_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("folder:"), state="*")
async def folder_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏"""
    await bot.answer_callback_query(callback_query.id)
    
    folder_id = int(callback_query.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –≤ –ø–∞–ø–∫–µ
    channels = await web_analyzer.get_channels(folder_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    if channels:
        for channel in channels:
            keyboard.add(
                InlineKeyboardButton(
                    f"üì¢ {channel['title']} (@{channel['username']})",
                    callback_data=f"channel:{channel['id']}"
                )
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–æ–π
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"add_to_folder:{folder_id}"),
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É", callback_data=f"delete_folder:{folder_id}"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_folders")
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ
    folders = await web_analyzer.get_folders()
    folder_name = next((f["name"] for f in folders if f["id"] == folder_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∞–ø–∫–∞")
    
    await bot.send_message(
        callback_query.from_user.id,
        f"üìÅ –ü–∞–ø–∫–∞: *{folder_name}*\n\n" + 
        (f"–ö–∞–Ω–∞–ª—ã –≤ –ø–∞–ø–∫–µ ({len(channels)}):" if channels else "–í —ç—Ç–æ–π –ø–∞–ø–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤."),
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data.startswith("add_to_folder:"), state="*")
async def add_to_folder_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ –ø–∞–ø–∫—É"""
    await bot.answer_callback_query(callback_query.id)
    
    folder_id = int(callback_query.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–∞–ø–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(folder_id=folder_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_channel")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
        reply_markup=keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
    await UserState.waiting_channel_username.set()

@dp.message_handler(state=UserState.waiting_channel_username)
async def process_channel_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞"""
    channel_username = message.text.strip()
    
    if not channel_username:
        await message.answer("–ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª @ –≤ –Ω–∞—á–∞–ª–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if channel_username.startswith("@"):
        channel_username = channel_username[1:]
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–∞–ø–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    folder_id = data.get("folder_id")
    
    if not folder_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    processing_msg = await message.answer(MESSAGES['processing'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
    result = await web_analyzer.add_channel(folder_id, channel_username)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    await processing_msg.delete()
    
    if result.get("status") == "success":
        channel_info = result.get("channel_info", {})
        await message.answer(
            f"‚úÖ –ö–∞–Ω–∞–ª *{channel_info.get('title', channel_username)}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–ø–∫—É!",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "cancel_add_channel", state=UserState.waiting_channel_username)
async def cancel_add_channel(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    await bot.send_message(
        callback_query.from_user.id,
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "back_to_folders", state="*")
async def back_to_folders(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫"""
    await bot.answer_callback_query(callback_query.id)
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /folders
    await cmd_folders(callback_query.message)

@dp.callback_query_handler(lambda c: c.data.startswith("delete_folder:"), state="*")
async def delete_folder_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏"""
    await bot.answer_callback_query(callback_query.id)
    
    folder_id = int(callback_query.data.split(":")[1])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_folder:{folder_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"folder:{folder_id}")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–∞–ø–∫—É? –í—Å–µ –∫–∞–Ω–∞–ª—ã –≤ –Ω–µ–π —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_delete_folder:"), state="*")
async def confirm_delete_folder(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏"""
    await bot.answer_callback_query(callback_query.id)
    
    folder_id = int(callback_query.data.split(":")[1])
    
    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É
    result = await web_analyzer.delete_folder(folder_id)
    
    if result.get("status") == "success":
        await bot.send_message(
            callback_query.from_user.id,
            "‚úÖ –ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫
        await cmd_folders(callback_query.message)
    else:
        await bot.send_message(
            callback_query.from_user.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )

@dp.callback_query_handler(lambda c: c.data.startswith("channel:"), state="*")
async def channel_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    channel_id = int(callback_query.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channels = await web_analyzer.get_channels()
    channel = next((c for c in channels if c["id"] == channel_id), None)
    
    if not channel:
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"analyze_channel:{channel_id}"),
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_channel:{channel_id}"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_channels")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        f"üì¢ –ö–∞–Ω–∞–ª: *{channel['title']}*\n" +
        f"Username: @{channel['username']}\n" +
        f"ID: `{channel['id']}`",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data == "back_to_channels", state="*")
async def back_to_channels(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤"""
    await bot.answer_callback_query(callback_query.id)
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /channels
    await cmd_channels(callback_query.message)

@dp.callback_query_handler(lambda c: c.data.startswith("delete_channel:"), state="*")
async def delete_channel_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    channel_id = int(callback_query.data.split(":")[1])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_channel:{channel_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"channel:{channel_id}")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª?",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_delete_channel:"), state="*")
async def confirm_delete_channel(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    channel_id = int(callback_query.data.split(":")[1])
    
    # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
    result = await web_analyzer.delete_channel(channel_id)
    
    if result.get("status") == "success":
        await bot.send_message(
            callback_query.from_user.id,
            "‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤
        await cmd_channels(callback_query.message)
    else:
        await bot.send_message(
            callback_query.from_user.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )

@dp.callback_query_handler(lambda c: c.data.startswith("analyze_channel:"), state="*")
async def analyze_channel_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    channel_id = int(callback_query.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channels = await web_analyzer.get_channels()
    channel = next((c for c in channels if c["id"] == channel_id), None)
    
    if not channel:
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("–ó–∞ 1 –¥–µ–Ω—å", callback_data=f"analyze_period:{channel_id}:1"),
        InlineKeyboardButton("–ó–∞ 4 –¥–Ω—è", callback_data=f"analyze_period:{channel_id}:4"),
        InlineKeyboardButton("–ó–∞ 7 –¥–Ω–µ–π", callback_data=f"analyze_period:{channel_id}:7"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"channel:{channel_id}")
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        f"üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞ *{channel['title']}*:",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data.startswith("analyze_period:"), state="*")
async def analyze_period_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    parts = callback_query.data.split(":")
    channel_id = int(parts[1])
    period_days = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channels = await web_analyzer.get_channels()
    channel = next((c for c in channels if c["id"] == channel_id), None)
    
    if not channel:
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    processing_msg = await bot.send_message(
        callback_query.from_user.id,
        MESSAGES['processing']
    )
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
        result = await web_analyzer.analyze_channel(channel['username'], period_days)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await processing_msg.delete()
        
        if result.get("status") == "success":
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            messages = result.get("messages", [])
            topics = result.get("topics", [])
            sentiment = result.get("sentiment", {})
            
            report = f"üìä *–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ {channel['title']}*\n\n"
            report += f"üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π\n"
            report += f"üìù –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n\n"
            
            if topics:
                report += "üîç *–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:*\n"
                for topic in topics[:5]:
                    report += f"‚Ä¢ {topic}\n"
                report += "\n"
            
            if sentiment:
                report += "üòä *–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:*\n"
                report += f"‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è: {sentiment.get('positive', 0):.1f}%\n"
                report += f"‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è: {sentiment.get('neutral', 0):.1f}%\n"
                report += f"‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è: {sentiment.get('negative', 0):.1f}%\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª—É", callback_data=f"channel:{channel_id}")
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await send_long_message(
                callback_query.from_user.id,
                report,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
        else:
            await bot.send_message(
                callback_query.from_user.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞: {e}")
        await processing_msg.delete()
        await bot.send_message(
            callback_query.from_user.id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞: {str(e)}"
        )

@dp.callback_query_handler(lambda c: c.data.startswith("set_model:"), state="*")
async def set_model_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏"""
    await bot.answer_callback_query(callback_query.id)
    
    model_name = callback_query.data.split(":")[1]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
    result = await ai_manager.set_model(model_name)
    
    if result:
        await bot.send_message(
            callback_query.from_user.id,
            f"‚úÖ –ú–æ–¥–µ–ª—å *{model_name}* —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await bot.send_message(
            callback_query.from_user.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏ {model_name}."
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    await cmd_models(callback_query.message)

@dp.callback_query_handler(lambda c: c.data.startswith("toggle_provider:"), state="*")
async def toggle_provider_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    provider = callback_query.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    current_providers = await ai_manager.get_current_providers()
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    if provider in current_providers:
        current_providers.remove(provider)
    else:
        current_providers.append(provider)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_providers=current_providers)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    providers = await ai_manager.get_available_providers()
    
    for p in providers:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        provider_text = f"‚úÖ {p}" if p in current_providers else p
        keyboard.add(
            InlineKeyboardButton(
                provider_text,
                callback_data=f"toggle_provider:{p}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    keyboard.add(
        InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_providers")
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.edit_message_text(
        f"üîå –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: *{', '.join(current_providers)}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data == "save_providers", state="*")
async def save_providers_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_providers = data.get("selected_providers", [])
    
    if not selected_providers:
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    result = await ai_manager.set_providers(selected_providers)
    
    if result:
        await bot.send_message(
            callback_query.from_user.id,
            f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: *{', '.join(selected_providers)}*",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "add_channel", state="*")
async def add_channel_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    await bot.answer_callback_query(callback_query.id)
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_channel
    await cmd_add_channel(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == "cancel_operation", state="*")
async def cancel_operation(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.finish()
    await callback_query.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "generate_slogans", state="*")
async def generate_slogans_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–∑—É–Ω–≥–æ–≤"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    data = await state.get_data()
    strategy = data.get('strategy', {}).get('strategy', '')
    
    if not strategy:
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–∑—É–Ω–≥–æ–≤"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    processing_msg = await bot.send_message(
        callback_query.from_user.id,
        MESSAGES['processing']
    )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
    generation_task = asyncio.create_task(_generate_slogans_task(data))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    update_task = asyncio.create_task(_update_processing_message(processing_msg))
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        slogans = await generation_task
        # –û—Ç–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        update_task.cancel()
        
        if isinstance(slogans, str) and slogans.startswith("–û—à–∏–±–∫–∞"):
            await processing_msg.edit_text(
                f"‚ùå {slogans}",
                parse_mode=ParseMode.HTML
            )
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–∑—É–Ω–≥–∏
        slogans_text = "üì¢ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–∑—É–Ω–≥–∏:*\n\n"
        for i, slogan in enumerate(slogans, 1):
            slogans_text += f"{i}. {slogan}\n"
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="generate_slogans"),
            InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="back_to_strategy"),
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="finish_strategy")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await send_long_message(
            callback_query.from_user.id,
            slogans_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
        
    except asyncio.CancelledError:
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
        update_task.cancel()
        await processing_msg.edit_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–∑—É–Ω–≥–æ–≤ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        update_task.cancel()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–∑—É–Ω–≥–æ–≤: {e}")
        await processing_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–∑—É–Ω–≥–æ–≤: {str(e)}")

async def _generate_slogans_task(data: dict) -> List[str]:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–∑—É–Ω–≥–æ–≤"""
    try:
        strategy = data.get('strategy', {}).get('strategy', '')
        point_b = data.get('point_b', '')
        target_audience = data.get('target_audience', '')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–º—É –¥–ª—è –ª–æ–∑—É–Ω–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Ü–µ–ª–∏
        theme = f"{point_b}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n{strategy[:500]}..."
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∑—É–Ω–≥–∏
        slogans = await ai_manager.generate_slogans(
            theme=theme,
            target_audience=target_audience,
            count=5
        )
        
        return slogans
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–∑—É–Ω–≥–æ–≤: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–∑—É–Ω–≥–æ–≤: {str(e)}"

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown) 
